/*
82. Remove Duplicates from Sorted List II
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
*/




/*
My WRONG Solution
{runtime}
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode rtn = null;
        ListNode temp = head;
    	
     while(temp!=null){   
         if(temp.next!=null && temp.val == temp.next.val){
                 while(temp.next!=null && temp.val == temp.next.val){
                temp = temp.next;
            }

            if(rtn == null && temp.next!=null){
                rtn = temp.next;

            } else if(rtn == null && temp.next == null){
                return null;
            } else if(rtn !=null && temp.next !=null){
                rtn.next = temp.next;
                rtn = rtn.next;
            } else if(rtn!=null && temp.next == null){
                return rtn;
            }
         } else {
             if(rtn==null){
                 rtn=temp;
             }else{
                 rtn.next=temp;
                
             }
             temp = temp.next;
         }
        
        
    }
            
        
    return rtn;
        
    }
}


/*
Optimized Solution from Leetcode
{source}
*/



/*
Comments: This is the medium version of what I did yesterday (83.Remove Duplicates from Sorted List)
*/
